* Material UI
** Container
** Box
** sx
* Localizing the app
** Resources
https://developer.mozilla.org/en-US/docs/Glossary/Locale
** Detect the user's locale
https://stackoverflow.com/questions/673905/how-to-determine-users-locale-within-browser

The stack overflow article suggests that the most reliable method for detecting a user's prefered language is
to read the <Accept-Language> Http header.

However MDN supports that newer browser versions offer the same functionality.
https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages

** Translate typography elements
** Server locale-specific content such as dates, currencies and numbers
- Dates
    - Day names
    - Day name format
    - Month names
    - Month name format
    - Time format
- Currencies
    - Value
    - Symbol
- Numbers
    - Decimal points

** Flow
Enter Site -> (detect users locale) -> (store the locale to be offered, in a Cookie or somehing) -> render app

Attach listener to browser settings change
Fire event when user clicks on locale offered

User selects another language -> (store the locale to be offerd, in a Cookie or something) -> render app
User changes his language settings through the browser -> (store the locale to be offered, in a Cookie or something) -> render app
* State persistance
** resources
https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
** Local && Session Storage
Setting local storage:
Window.localStorage.setting = "string"
Window.localStorage['setting'] = "string"
Window.localStorage.setItem('setting') = 'string'

Retreiving local storage:
Window.localStorage.setting
Window.localStorage['setting']
Window.localStorage.getItem('setting')

Window.localStorage value is a storage object
Window.sessionStorage value is a storage object
THeir difference is their expiration date. The localStorage storage object persists across even system reboots.
The sessionStorage object does not persist even across browser sessions.

Responding to storage changes with the StorageEvent:
the StorageEvent is fired whenever a change is made to the Storage object.


** Cookies
* Session implementation
* Mqtt
An mqtt client is a message delivery agent.

A responsible mqtt client *must* provide such facilities as to be able to bring
forth *accurate*, *definitive* and *up to date* information about the state of a
message.

** Questions
If an mqtt exchange operates in blocking and non-blocking mode (synchronous and
asynchronous) which facilities does npm/mqtt offer for selecting between the 2?

** Glossary
*** Payload
A payload is the client's data admitted for distribution. The term excludes the
data added by the broker.
*** Message
A message is comprised of the payload, the topic and any other information added
by the broker.
*** Topic
A topic is an address of channel.
*** Broker
A broker is relatively equivalent to a server in the mqtt universe.
It is responsible for:

Enabling publishers.
Admitting subscribers.
Making sure to forward messages to their registered channel.
*** Publisher
A client to the broker, who has submitted a payload for distribution to the
network.
*** Subscriber
A client to the broker, who has registered an interest in collecting published
payloads.


** My Client
this.server._subscibe -> asynchronous
this.server._publish -> asynchronous

** tasks
*** Parameters
--verbose
--topics
--subscribe-all
--emulate-load
*** verbose mode
In verbose mode the proxy shall log every important action such as:

a client has stated an intent to subscribe to a channel
a client has stated an intent to publish to a channel
A client successfully subscribed to a channel
A message was successfully forwarded to its destination
A destination could not be located
A destination only accepts one way communication
*** Logging agent
If no logging agent has been provided the client shall default to writting to
the console.
*** adhoc configuration
* Color pallete
** purple
#+begin_src css
  /* BLACK */
  #000000

  /* WHITE */
  #ffffff

  /* PURPLE */
  #f3e5f5
  #e1bee7
  #ce93d8
  #ba68c8
  #ab47bc
  #9c27b0
  #8e24aa
  #7b1fa2
  #6a1b9a
  #4a148c
  #ea80fc
  #e040fb
  #d500f9
  #aa00ff


  #f2f0fc
  #cbc1ff
  #b2a3ff
  #a18fff
  #8476d1
  #6753ac
  #40199a
  #1f0066

  /* DEEP PURPLE */
  #ede7f6
  #d1c4e9
  #b39ddb
  #9575cd
  #7e57c2
  #673ab7
  #5e35b1
  #512da8
  #4527a0
  #311b92
  #b388ff
  #7c4dff
  #651fff
  #6200ea

  /* GREY */
  #FFF
  #f9f9f9
  #f0f0f0
  #e8e8e8
  #dfdfdf
  #d7d7d7
  #cecece
  #c6c6c6
  #bdbdbd
  #b4b4b4
  #acacac
  #a3a3a3
  #9b9b9b
  #939393
  #8a8a8a
  #828282
  #797979

  pearl bush: hsl(30, 25%, 91%)
  athens gray: hsl(240, 3%, 94%)
  white smoke: hsl(0, 0%, 93%)
  lynch: hsl(211, 12%, 48%)
  pumice: hsl(132, 6%, 83%)
  gallery: hsl(0, 0%, 93%)
  silver sand: hsl(204, 8%, 76%)
  porcelain: hsl(192, 15%, 94%)
  cascade: hsl(184, 9%, 62%)
  iron: hsl(197, 10%, 87%);
  edward: hsl(180, 8%, 69%);
  cararra: hsl(40, 10%, 94%);
  silver: hsl(0, 0, 75%)
  solitude: hsl(207, 20%, 91%)
  pampas: hsl(30, 14%, 95%);
  mystic: hsl(213, 24%, 93%)
  mercury: hsl(0, 0%, 91%)


REDS:
https://cssgradient.io/shades-of-red/
airbnb #fd5c63 // saturated, rugged, light
alabama crimson: #9e1b32 // bold, saturated, heavy
american rose: #FF033E // saturated, pastel, full, bright

#f6643d // tomatoe
GREENS:
https://cssgradient.io/shades-of-green/


  /* AF ADMIN */
  base: #d199ff
  shade: #c988ff
  shade: #c277ff
  shade: #ba66ff
  shade: #b255ff

  #9F34F7
  #793BAB
  #9F34F7
  #793BAB
  #793BAB
  #9F34F7

  /* 3 Main colors */
  /* 60% */ #d199FF hsl(273, 100%, 80%)
  /* 30% */ #FF92DE hsl(318, 100%, 79%)
  /* 30% */ #AEA0FF hsl(249, 100%, 81%)

  
#+end_src
** functional colors
The purpose of the color in terms of where it is to be used defines the name of the variable.

--primary-color: var(--some-color-10);
--primary-border-color: var(--green-color-10);
--primary-hover-color: var(--gren-color);
** Links color
primary
primary-hover
primary-active
primary-visited
text-font-color
** Buttons
primary
primary-hover
primary-active
primary-focus
primary-shadow
CTA -> call to action
border
shadow?

** splitting colors
fills
strokes
text


basic-strong
basic-medium
basic-base
basic-light
basic-subtle

contrast-strong
contrast-medium
contrast-base
contrast-light
contrast-subtle

accent-strong
accent-medium
accent-base
accent-light
accent-subtle

text-strong
text-medium
text-base
text-light
text-subtle

generic-strong
generic-medium
generic-base
generic-light
generic-subtle


 /* forms */
    --form-element-border: var(--color-border);
    --form-element-border-focus: var(--color-primary);
    --form-element-border-error: var(--color-error);
    --form-element-bg: var(--white);
    --form-text-placeholder: var(--gray-4);

    /* buttons */
    --btn-primary-bg: var(--color-primary);
    --btn-primary-hover: var(--color-primary-light);
    --btn-primary-active: var(--color-primary-dark);
    --btn-primary-label: var(--white);


    color-text: var(--gray-10);
    --color-text-heading: var(--black);
    --color-text-subtle: var(--gray-6);
    --color-link: var(--color-primary);
    --color-link-visited: var(--color-primary-dark);
    --color-mark: var(--color-accent-bg);
    --color-blockquote-border: var(--gray-2);

--maximeheckel-form-input-active': 'var(--maximeheckel-colors-brand)',
    '--maximeheckel-form-input-background': 'hsl(var(--palette-gray-00))',
    '--maximeheckel-form-input-disabled': 'hsl(var(--palette-gray-09))',
    '--maximeheckel-form-input-border': 'hsl(var(--palette-blue-10))',
    '--maximeheckel-form-input-focus': 'hsla(var(--palette-blue-40), 0.55

    --button-text-shadow-color: rgba(0, 0, 0, 0.15);
    --button-shadow-color: rgba(0, 0, 0, 0.2);
    --button-primary-color: var(--blumine-color);
    --button-success-color: var(--emerald-color);
    --button-primary-hov-color: var(--bali-hai-color);
    --button-success-hov-color: var(--algae-green-color);
    --button-hover-color: var(--jelly-bean-color);
    --coin-button-border-color: var(--calypso-color);
    --coin-button-bg-color: var(--dark-blumine-color);
    --coin-button-shadow-color: var(--transparent-geyser-color);

    --option-link-color: var(--tower-gray-color);
    --option-link-hov-color: var(--hit-gray-color);
    --option-link-border-color: var(--geyser-color);
    --option-link-bg-color: var(--mystic-color);
    --option-link-hov-bg-color: var(--darker-mystic-color);


    --link-color: var(--bali-hai-color);
    --navigation-bg-color: var(--blumine-color);
    --active-item-color: var(--scooter-color);
    --hover-icon-color: var(--emerald-color);

 --error-text-color: var(--sunglo-color);
    --error-border-light-color: var(--azalea-color);
    --error-border-dark-color: var(--mandys-pink-color);

     --serif-fonts: Lora,'Times New Roman', serif;
    --sans-serif-fonts: Montserrat, Helvetica, sans-serif;

    --welcome-head-text: 1.75em;
    --welcome-text: 1.125em;
    --head-1-text: 3.5rem;
    --head-2-text: 1.5rem;
    --head-3-text: 1.2rem;
    --date-text: 1.75rem;
    --normal-text: 0.875rem;

* hand bracelent
** My hand bracelet
*** cls-6 ( the bracelet ornament )
cls-6 -> the bracelet ornament
fill: var(--primary-medium);

*** cls-5 ( the bracelet wristband )

*** cls-2 ( the big background circle)
light-mode.bracelet-idle .cls-2
fill: #cacbcc;

*** cls-4 ( the hand outline )
*** cls-3 ( the hand shadow )
*** cls-1 (generic wrapper ) 
* json editor
https://github.com/josdejong/jsoneditor

* Dialog, Dropdown, Tooltip, Menu
** Interface shared by all these components
*** position
All of these 'modal' components should allow the user to direct the placement
of the modal through a prop called 'position'.

The following positions should be offered.

top-start top top-end
left-start left left-end
bottom-start  bottom bottom-end
right-start right right-end
*** offset

** Dialog
A dialog is a floating element that displays information that requires
immediate attention, appearing over the page content and blocking interactions
with the page until it is dismissed.

It is centered on the viewport, not anchored to any particular reference
element.

It is modal and renders a backdrop behind the dialog that dims the content
behind it, making the rest of the page inaccessible.

A dialog must:

Allow the user to close the dialog by pressing escape.

capture focus within the dialog.
** Dropdown
** Tooltip
*** About
A tooltip is a floating element that displays information related to an anchor
element when it receives keyboard focus or the mouse hovers over.

A tooltip must:

remain attached to its reference element and remain in view for the user
regardless of where it is positioned on the screen

must open when the mouse hovers of focus is within the referenced element.

If the user presses esc while the tooltip is open it should close.

* FLoating Ui (used in making dialogs etc)
https://floating-ui.com/docs/getting-started
** Simplest positioning behavior using defaults
#+begin_src javascript
  function App() {

      // The hook providing the positioning functionality
      const {x, y, strategy, refs } = useFloating();

      return (
              <React.Fragment>

          // useFloating requires 2 things in order to performs its
          // functions. It needs a reference element which provides
          // anchoring. The element to be positioned will be positined
          // relative to the reference element, the anchor element.


          // The reference element
              <button ref={refs.setReference}>Button</button>


          // The floating element
              <tooltip
          ref={refs.setFloating}
          style={{
              position: strategy,
              top: y ?? 0,
              left: x ?? 0,
              width: 'max-content'
          }}
              >
              tooltip
              </tooltip>


              </React.Fragment>
      );
  }
#+end_src
** Use floating options
placement
middleware
open
onOpenStart
** Middleware
*** offset
modifies the placement to add distance or margin between the reference and
floating elements
*** inline
positions the floating element relative to individual client rects rather than
the bounding box for better precision
*** shift
prevents the floating element from overflowingc a clipping container by shifting
it to stay in view
*** flip
prevents the floating element from overflowing a clipping ocntainer by flipping
it to the opposite placement to stay in view
*** autoPlacement
automatically chooses a placement for you using a most space strategy
*** size
resiezs the floating element, for example so it will not overflow a clipping
container, or to match the width of the reference element.
*** arrow
provides data to position an inner element of the floating element such that it
is centered to its reference element.
*** hide
provides data to hide the floating element in applicable situations when it no
longer appears attached to its reference element due to different clipping
contexts.

** useFloating
*** What is it?
It is a hook that encapsulates most of the logic that allows the creation of
floating elements relative to a reference element.
*** List its uses
- The ability to declare a reference element
  const { refs } = useFloating();
  <button ref={refs.setReference}/>
- The ability to declare a floating element
  const { refs } = useFloating();
  <button ref={refs.setFloating}/>
- Position coordinates
  const { x, y, strategy } = useFloating();
  <refelement style={{x, y, position: strategy}}/>
- Ability to adjust and completent the behavior of the floating element using middleware
- Get the references to the DOM elements
- const { refs } = useFloating();
  refs.reference.current
  refs.floating.current
- Get the DOM element
  const { elements } = useFloating();
  elements.reference
  elements.floating
- Interactivity
  useFloating({open, onOpenChange});
  
* React
** Refs
*** resources
https://blog.logrocket.com/complete-guide-react-refs/
https://www.geeksforgeeks.org/reactjs-refs/
https://dmitripavlutin.com/react-useref-guide/
https://redd.gitbook.io/react-advanced-form/architecture/referencing
https://medium.com/dovetail-engineering/react-hooks-stable-references-and-performance-f5d876033a5c
https://www.smashingmagazine.com/2020/11/react-useref-hook/
https://felixgerschau.com/react-forwardref-explained/
https://dev.to/carlosrafael22/using-refs-in-react-functional-components-part-1-useref-callback-ref-2j5i
*** howtos
**** how does one create a reference in a functional component
#+begin_src javascript
  const actionButton = ({action, children}) => {
      const buttonRef = useRef(null);

      return (
              <button onClick={action} ref={buttonRef}>
              {children}
              </button>
      );
  }
#+end_src
*** callback references
A callback reference is an alternate method by which react allows
users to get a reference to a DOM element.

Normally one creates a reference variable using:

const reference = useRef(null);

Then, if the user chooses to link the reference to a DOM element it is done by
assigning the reference to the ref attribute:

<button ref={reference}/>

The linking is done by react. The user has no control over the linking of the
refrence variable to the DOM element.

A callback function transfers control over the linking of the DOM element to the
reference variable  to the user by passing the DOM element to the callback
function at which point the user may use it any way the want.


<button ref={(DOM_ELEMENT) => do_something...}



** UseLayoutEffect
*** resources
https://beta.reactjs.org/reference/react/useLayoutEffect
** Code - reusability, sharing state, composition
*** resources
https://medium.com/@mjackson/use-a-render-prop-50de598f11ce
*** Mixins
*** High order components
*** Render prop
** useCallback, useMemo, Referential equality, computationally expensive calculations
* UI Lists
A list is any sequence of components that should be treated as such.

What do people expect of lists?

Lists should be navigable using the keyboard arrow keys.
Lists should be navigable using the tab key.
The element currently receiving focus should indicate it.
The element where the pointer resides if any should indicate it, but it should
not switch to a focused state.
If a user tabs away from the widget and returns, focus should return to the
element which last had focus.







* Browser keyboard events
** Codes
*** Down arrow
key: "ArrowDown"
keyCode: 40
*** Up arrow
key: "ArrowUp"
keyCode: 38

* Components
** Comboboxes
*** resources
https://www.w3.org/WAI/ARIA/apg/patterns/combobox/
*** Select-only combobox
*** Editable combobox

* editable combobox
** Interactions
*** DONE On tab
CLOSED: [2023-01-30 Mon 10:13]
combobox switches to open state.
comboboxtrigger is focused.
comboboxlist is revealed - opened.
combobox state is resseted.
*** DONE On escape
CLOSED: [2023-01-30 Mon 10:14]
combobox switches to close state.
comboboxtrigger loses focus.
comboboxlist is hidden - closed.
combobox state is resseted.
*** DONE On Enter
CLOSED: [2023-01-30 Mon 10:44]
combobox switches to close state.
comboboxtrigger loses focus.
comboboxlist is hidden - closed.

If the combobox has an active option at
the time of the closing event then that
option shall be marked as the output of
the combobox component.

If an option has not been marked as active
and the comboboxtrigger is an input tag
then the value of the input tag is marked
as the output of the combobox component.

*** DONE On Click outside the boundaries of the combobox
CLOSED: [2023-01-30 Mon 10:14]
combobox switches to close state.
comboboxtrigger loses focus
comboboxList is hidden - closed.
*** DONE On Click within one of the options
CLOSED: [2023-01-30 Mon 10:44]
combobox switches to close state.
comboboxtrigger loses focus.
comboboxlist is hidden - closed.

The option from which the event originated is
marked as selected and is therefore becomes the output
of the combobox component.
*** DONE On Click within the combobox trigger
CLOSED: [2023-01-31 Tue 10:37]
combobox toggles its state.
comboboxtrigger toggles focus.
comboboxlist toggles state.

The value of the comboboxtrigger is marked as selected
and therefore becomes the output of the combobox component.


* select-only combobox
