* About
This file acts as a journal or notepad towards the goal of assisting the
development of af_admin.
* Core Agent Factory State Machine
** About
The agent factory state machine implements a hierarchical finite state machine.
Meaning it is a state machine composed of state machines.

** file structure
** Events
** Initializing the state machine
*** About
The Agent Factory State Machine is complicated.
It depends on various services in order to perform its function.

Many of its services are asynchronous.

The database service is asynchronous.
The Mqtt client service is asynchronous.
Retrieving the cached data if any is also asynchronous.


Most database and mqtt clients such as mongoose and mqtt.js implement the
EventEmitter interface.

some actions of the AFM are dependent upon their services.


*** Options
*** cached data
My state machine should have the ability to be provided with its initial state.
Both for testing purposes and because it is a requirement.
*** Store
*** Mqtt Client
*** Logger
** Persisting the state machine
** Some transitions are asynchronous
*** Implementing transitions as a promise
*** promises

States:
pending
fulfilled
rejected
settled

*** then
then(optional fn onFulfilled, optional fn onRejected)

returns synchronously a promise

** Handling the stores asynchronous initializiation
*** Local initialization check
*** Delayed startup
*** pre initialization queues
** DONE Task runner
CLOSED: [2023-03-03 Fri 16:06]
starts at offline mode.
listens on events. When the underlying service becomes online
switches to the online state. if there are pending tasks transitions
to the pending state.



idle.run =
create a promise
create a task.
return the promise
push the task in the taskQueue
is the connection online?
if yes switch to online state.
if no switch to pending state.

pending state.
set up a polling timer.
each second or whatever.
remove expired tasks.
checks if the the connection is online.
If yes remove the timer.
switch to online state.
do not allow timer to actually run forever.

pending.run =
create a promise
create a job
return the promise
put the job in the jobQueue
move the pollingExpirationDate forward


online state
run all jobs

online run
create a promise
create a job
return the promise
put the job in the jobQueue
run all jobs




** Persisting the State of the AgentFactoryMachine
*** resources
https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Basic_Terminology
https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria
https://en.wikipedia.org/wiki/Object_database
*** create object store
createObjectStore(name, options);

where options:

{
keyPath: 'id',
autoIncrement: boolean,
}
*** CRUD operations procedure
**** get database object
**** open transaction on database
**** open object store on transaction
**** perform operation on object store
** Transfer the mqtt client
